/* eslint-disable */
import * as types from './graphql'
import type { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core'

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 * Learn more about it here: https://the-guild.dev/graphql/codegen/plugins/presets/preset-client#reducing-bundle-size
 */
type Documents = {
  '\n  \n  \n  query GetCustomers($first: Int, $after: String) {\n    customers(first: $first, after: $after) {\n      edges {\n        node {\n          id\n          fullName\n          shortName\n          email {\n            email\n            isVerified\n          }\n          avatarUrl\n          company {\n            id\n            name\n          }\n          status\n          createdAt {\n            ...DateTime\n          }\n          updatedAt {\n            ...DateTime\n          }\n        }\n        cursor\n      }\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      totalCount\n    }\n  }\n': typeof types.GetCustomersDocument
  '\n  \n  \n  query GetTenants($first: Int, $after: String) {\n    tenants(first: $first, after: $after) {\n      edges {\n        node {\n          id\n          name\n          externalId\n          createdAt {\n            ...DateTime\n          }\n          updatedAt {\n            ...DateTime\n          }\n        }\n        cursor\n      }\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n    }\n  }\n': typeof types.GetTenantsDocument
  '\n  \n  \n  query GetThreadDetails($threadId: ID!) {\n    thread(threadId: $threadId) {\n      id\n      title\n      status\n      priority\n      statusChangedAt {\n        ...DateTime\n      }\n      createdAt {\n        ...DateTime\n      }\n      updatedAt {\n        ...DateTime\n      }\n      customer {\n        id\n        fullName\n        email {\n          email\n        }\n        company {\n          name\n        }\n      }\n      labels {\n        id\n        labelType {\n          name\n          color\n          icon\n        }\n      }\n      # timeline(first: 50) {\n      #   edges {\n      #     node {\n      #       id\n      #       timestamp {\n      #         ...DateTime\n      #       }\n      #       actor {\n      #         __typename\n      #         ... on UserActor {\n      #           user {\n      #             fullName\n      #             publicName\n      #           }\n      #         }\n      #         ... on CustomerActor {\n      #           customer {\n      #             fullName\n      #           }\n      #         }\n      #       }\n      #       entry {\n      #         __typename\n      #         ... on ChatEntry {\n      #           text\n      #           customerReadAt {\n      #             ...DateTime\n      #           }\n      #         }\n      #         ... on EmailEntry {\n      #           subject\n      #           textContent\n      #           from {\n      #             email\n      #             name\n      #           }\n      #           to {\n      #             email\n      #             name\n      #           }\n      #         }\n      #         ... on NoteEntry {\n      #           text\n      #         }\n      #       }\n      #     }\n      #   }\n      # }\n    }\n  }\n': typeof types.GetThreadDetailsDocument
  '\n  \n  \n  query GetThreads($filters: ThreadsFilter, $sortBy: ThreadsSort, $first: Int, $after: String) {\n    threads(filters: $filters, sortBy: $sortBy, first: $first, after: $after) {\n      edges {\n        node {\n          id\n          title\n          status\n          priority\n          statusChangedAt {\n            ...DateTime\n          }\n          updatedAt {\n            ...DateTime\n          }\n          createdAt {\n            ...DateTime\n          }\n          customer {\n            id\n            fullName\n            email {\n              email\n            }\n            company {\n              name\n            }\n          }\n          labels {\n            id\n            labelType {\n              name\n              color\n              icon\n            }\n          }\n          previewText\n        }\n        cursor\n      }\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      totalCount\n    }\n  }\n': typeof types.GetThreadsDocument
  '\n  \n  \n  query GetTimelineEvents($threadId: ID!, $first: Int, $after: String, $last: Int, $before: String) {\n    thread(threadId: $threadId) {\n      id\n      timelineEntries(first: $first, after: $after, last: $last, before: $before) {\n      edges {\n        node {\n          id\n          customerId\n          threadId\n          timestamp {\n            ...DateTime\n          }\n          llmText\n          actor {\n            __typename\n            ... on UserActor {\n              userId\n              user {\n                __typename\n                id\n                fullName\n                publicName\n                email\n                status\n                avatarUrl\n              }\n            }\n            ... on MachineUserActor {\n              machineUserId\n              machineUser {\n                __typename\n                id\n                fullName\n                publicName\n                description\n              }\n            }\n            ... on CustomerActor {\n              customerId\n              customer {\n                __typename\n                id\n                fullName\n                email {\n                  email\n                }\n              }\n            }\n          }\n          entry {\n            __typename\n            ... on ChatEntry {\n              __typename\n              chatId\n              chatText: text\n              customerReadAt {\n                ...DateTime\n              }\n              attachments {\n                id\n                fileName\n                fileSize {\n                  bytes\n                }\n                fileMimeType\n              }\n            }\n            ... on EmailEntry {\n              __typename\n              emailId\n              subject\n              textContent\n              hasMoreTextContent\n              fullTextContent\n              markdownContent\n              hasMoreMarkdownContent\n              fullMarkdownContent\n              authenticity\n              sentAt {\n                ...DateTime\n              }\n              receivedAt {\n                ...DateTime\n              }\n              sendStatus\n              isStartOfThread\n              from {\n                name\n                email\n              }\n              to {\n                name\n                email\n              }\n              additionalRecipients {\n                name\n                email\n              }\n              hiddenRecipients {\n                name\n                email\n              }\n              attachments {\n                id\n                fileName\n                fileSize {\n                  bytes\n                }\n                fileMimeType\n              }\n              bounces {\n                bouncedAt {\n                  ...DateTime\n                }\n                recipient {\n                  name\n                  email\n                }\n                isSendRetriable\n              }\n            }\n            ... on NoteEntry {\n              noteId\n              text\n              markdown\n              attachments {\n                id\n                fileName\n                fileSize {\n                  bytes\n                }\n                fileMimeType\n              }\n            }\n            ... on CustomEntry {\n              externalId\n              title\n              type\n              attachments {\n                id\n                fileName\n                fileSize {\n                  bytes\n                }\n                fileMimeType\n              }\n            }\n            ... on SlackMessageEntry {\n              slackMessageLink\n              slackWebMessageLink\n              text\n              customerId\n              relatedThread {\n                threadId\n              }\n              attachments {\n                id\n                fileName\n                fileSize {\n                  bytes\n                }\n                fileMimeType\n              }\n              lastEditedOnSlackAt {\n                ...DateTime\n              }\n              deletedOnSlackAt {\n                ...DateTime\n              }\n              reactions {\n                name\n                imageUrl\n                actors {\n                  __typename\n                  ... on UserActor {\n                    userId\n                    user {\n                      publicName\n                    }\n                  }\n                  ... on CustomerActor {\n                    customerId\n                    customer {\n                      fullName\n                    }\n                  }\n                }\n              }\n            }\n            ... on SlackReplyEntry {\n              __typename\n              slackMessageLink\n              slackWebMessageLink\n              customerId\n              text\n              attachments {\n                id\n                fileName\n                fileSize {\n                  bytes\n                }\n                fileMimeType\n              }\n              lastEditedOnSlackAt {\n                ...DateTime\n              }\n              deletedOnSlackAt {\n                ...DateTime\n              }\n              reactions {\n                name\n                imageUrl\n                actors {\n                  __typename\n                  ... on UserActor {\n                    userId\n                    user {\n                      publicName\n                    }\n                  }\n                  ... on CustomerActor {\n                    customerId\n                    customer {\n                      fullName\n                    }\n                  }\n                }\n              }\n            }\n            ... on ThreadEventEntry {\n              __typename\n              timelineEventId\n              title\n              customerId\n              externalId\n            }\n            ... on CustomerEventEntry {\n              __typename\n              timelineEventId\n              title\n              customerId\n              externalId\n            }\n            ... on ThreadAssignmentTransitionedEntry {\n              __typename\n              previousAssignee {\n                ... on User {\n                  id\n                  fullName\n                }\n                ... on MachineUser {\n                  id\n                  fullName\n                }\n                ... on System {\n                  id\n                }\n              }\n              nextAssignee {\n                ... on User {\n                  id\n                  fullName\n                }\n                ... on MachineUser {\n                  id\n                  fullName\n                }\n                ... on System {\n                  id\n                }\n              }\n            }\n            ... on ThreadAdditionalAssigneesTransitionedEntry {\n              __typename\n              previousAssignees {\n                ... on User {\n                  id\n                  fullName\n                }\n                ... on MachineUser {\n                  id\n                  fullName\n                }\n                ... on System {\n                  id\n                }\n              }\n              nextAssignees {\n                ... on User {\n                  id\n                  fullName\n                }\n                ... on MachineUser {\n                  id\n                  fullName\n                }\n                ... on System {\n                  id\n                }\n              }\n            }\n            ... on ThreadStatusTransitionedEntry {\n              __typename\n              nextStatus\n            }\n            ... on ThreadPriorityChangedEntry {\n              __typename\n              previousPriority\n              nextPriority\n            }\n            ... on ThreadLabelsChangedEntry {\n              __typename\n              previousLabels {\n                __typename\n                id\n                labelType {\n                  __typename\n                  id\n                  name\n                  description\n                  icon\n                  color\n                }\n              }\n              nextLabels {\n                __typename\n                id\n                labelType {\n                  __typename\n                  id\n                  name\n                  description\n                  icon\n                  color\n                }\n              }\n            }\n            ... on LinearIssueThreadLinkStateTransitionedEntry {\n              __typename\n              linearIssueId\n              previousLinearStateId\n              nextLinearStateId\n            }\n            ... on ServiceLevelAgreementStatusTransitionedEntry {\n              __typename\n              previousSLAStatus: previousStatus\n              nextSLAStatus: nextStatus\n            }\n            ... on ThreadDiscussionEntry {\n              __typename\n              slackChannelName\n              customerId\n              threadDiscussionId\n              slackMessageLink\n            }\n            ... on ThreadDiscussionResolvedEntry {\n              __typename\n              slackChannelName\n              customerId\n              threadDiscussionId\n              slackMessageLink\n              resolvedAt {\n                ...DateTime\n              }\n            }\n            ... on MSTeamsMessageEntry {\n              __typename\n              text\n              markdownContent\n              msTeamsMessageId\n              msTeamsMessageLink\n              customerId\n              attachments {\n                id\n                fileName\n                fileSize {\n                  bytes\n                }\n                fileMimeType\n              }\n            }\n            ... on ThreadLinkUpdatedEntry {\n              __typename\n              threadLink {\n                id\n                threadId\n                title\n                url\n                description\n                status\n              }\n              previousThreadLink {\n                id\n                threadId\n                title\n                url\n                description\n                status\n              }\n            }\n            ... on DiscordMessageEntry {\n              __typename\n              markdownContent\n              discordMessageId\n              discordMessageLink\n              customerId\n              attachments {\n                id\n                fileName\n                fileSize {\n                  bytes\n                }\n                fileMimeType\n              }\n            }\n            ... on HelpCenterAiConversationMessageEntry {\n              __typename\n              messageId\n              helpCenterId\n              messageMarkdown: markdown\n            }\n          }\n        }\n        cursor\n        }\n        pageInfo {\n          hasNextPage\n          hasPreviousPage\n          startCursor\n          endCursor\n        }\n      }\n    }\n  }\n': typeof types.GetTimelineEventsDocument
  '\n  query GetWorkspace {\n    myWorkspace {\n      id\n      name\n      publicName\n    }\n  }\n': typeof types.GetWorkspaceDocument
  '\n  fragment DateTime on DateTime {\n    __typename\n    iso8601\n  }\n': typeof types.DateTimeFragmentDoc
}
const documents: Documents = {
  '\n  \n  \n  query GetCustomers($first: Int, $after: String) {\n    customers(first: $first, after: $after) {\n      edges {\n        node {\n          id\n          fullName\n          shortName\n          email {\n            email\n            isVerified\n          }\n          avatarUrl\n          company {\n            id\n            name\n          }\n          status\n          createdAt {\n            ...DateTime\n          }\n          updatedAt {\n            ...DateTime\n          }\n        }\n        cursor\n      }\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      totalCount\n    }\n  }\n':
    types.GetCustomersDocument,
  '\n  \n  \n  query GetTenants($first: Int, $after: String) {\n    tenants(first: $first, after: $after) {\n      edges {\n        node {\n          id\n          name\n          externalId\n          createdAt {\n            ...DateTime\n          }\n          updatedAt {\n            ...DateTime\n          }\n        }\n        cursor\n      }\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n    }\n  }\n':
    types.GetTenantsDocument,
  '\n  \n  \n  query GetThreadDetails($threadId: ID!) {\n    thread(threadId: $threadId) {\n      id\n      title\n      status\n      priority\n      statusChangedAt {\n        ...DateTime\n      }\n      createdAt {\n        ...DateTime\n      }\n      updatedAt {\n        ...DateTime\n      }\n      customer {\n        id\n        fullName\n        email {\n          email\n        }\n        company {\n          name\n        }\n      }\n      labels {\n        id\n        labelType {\n          name\n          color\n          icon\n        }\n      }\n      # timeline(first: 50) {\n      #   edges {\n      #     node {\n      #       id\n      #       timestamp {\n      #         ...DateTime\n      #       }\n      #       actor {\n      #         __typename\n      #         ... on UserActor {\n      #           user {\n      #             fullName\n      #             publicName\n      #           }\n      #         }\n      #         ... on CustomerActor {\n      #           customer {\n      #             fullName\n      #           }\n      #         }\n      #       }\n      #       entry {\n      #         __typename\n      #         ... on ChatEntry {\n      #           text\n      #           customerReadAt {\n      #             ...DateTime\n      #           }\n      #         }\n      #         ... on EmailEntry {\n      #           subject\n      #           textContent\n      #           from {\n      #             email\n      #             name\n      #           }\n      #           to {\n      #             email\n      #             name\n      #           }\n      #         }\n      #         ... on NoteEntry {\n      #           text\n      #         }\n      #       }\n      #     }\n      #   }\n      # }\n    }\n  }\n':
    types.GetThreadDetailsDocument,
  '\n  \n  \n  query GetThreads($filters: ThreadsFilter, $sortBy: ThreadsSort, $first: Int, $after: String) {\n    threads(filters: $filters, sortBy: $sortBy, first: $first, after: $after) {\n      edges {\n        node {\n          id\n          title\n          status\n          priority\n          statusChangedAt {\n            ...DateTime\n          }\n          updatedAt {\n            ...DateTime\n          }\n          createdAt {\n            ...DateTime\n          }\n          customer {\n            id\n            fullName\n            email {\n              email\n            }\n            company {\n              name\n            }\n          }\n          labels {\n            id\n            labelType {\n              name\n              color\n              icon\n            }\n          }\n          previewText\n        }\n        cursor\n      }\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      totalCount\n    }\n  }\n':
    types.GetThreadsDocument,
  '\n  \n  \n  query GetTimelineEvents($threadId: ID!, $first: Int, $after: String, $last: Int, $before: String) {\n    thread(threadId: $threadId) {\n      id\n      timelineEntries(first: $first, after: $after, last: $last, before: $before) {\n      edges {\n        node {\n          id\n          customerId\n          threadId\n          timestamp {\n            ...DateTime\n          }\n          llmText\n          actor {\n            __typename\n            ... on UserActor {\n              userId\n              user {\n                __typename\n                id\n                fullName\n                publicName\n                email\n                status\n                avatarUrl\n              }\n            }\n            ... on MachineUserActor {\n              machineUserId\n              machineUser {\n                __typename\n                id\n                fullName\n                publicName\n                description\n              }\n            }\n            ... on CustomerActor {\n              customerId\n              customer {\n                __typename\n                id\n                fullName\n                email {\n                  email\n                }\n              }\n            }\n          }\n          entry {\n            __typename\n            ... on ChatEntry {\n              __typename\n              chatId\n              chatText: text\n              customerReadAt {\n                ...DateTime\n              }\n              attachments {\n                id\n                fileName\n                fileSize {\n                  bytes\n                }\n                fileMimeType\n              }\n            }\n            ... on EmailEntry {\n              __typename\n              emailId\n              subject\n              textContent\n              hasMoreTextContent\n              fullTextContent\n              markdownContent\n              hasMoreMarkdownContent\n              fullMarkdownContent\n              authenticity\n              sentAt {\n                ...DateTime\n              }\n              receivedAt {\n                ...DateTime\n              }\n              sendStatus\n              isStartOfThread\n              from {\n                name\n                email\n              }\n              to {\n                name\n                email\n              }\n              additionalRecipients {\n                name\n                email\n              }\n              hiddenRecipients {\n                name\n                email\n              }\n              attachments {\n                id\n                fileName\n                fileSize {\n                  bytes\n                }\n                fileMimeType\n              }\n              bounces {\n                bouncedAt {\n                  ...DateTime\n                }\n                recipient {\n                  name\n                  email\n                }\n                isSendRetriable\n              }\n            }\n            ... on NoteEntry {\n              noteId\n              text\n              markdown\n              attachments {\n                id\n                fileName\n                fileSize {\n                  bytes\n                }\n                fileMimeType\n              }\n            }\n            ... on CustomEntry {\n              externalId\n              title\n              type\n              attachments {\n                id\n                fileName\n                fileSize {\n                  bytes\n                }\n                fileMimeType\n              }\n            }\n            ... on SlackMessageEntry {\n              slackMessageLink\n              slackWebMessageLink\n              text\n              customerId\n              relatedThread {\n                threadId\n              }\n              attachments {\n                id\n                fileName\n                fileSize {\n                  bytes\n                }\n                fileMimeType\n              }\n              lastEditedOnSlackAt {\n                ...DateTime\n              }\n              deletedOnSlackAt {\n                ...DateTime\n              }\n              reactions {\n                name\n                imageUrl\n                actors {\n                  __typename\n                  ... on UserActor {\n                    userId\n                    user {\n                      publicName\n                    }\n                  }\n                  ... on CustomerActor {\n                    customerId\n                    customer {\n                      fullName\n                    }\n                  }\n                }\n              }\n            }\n            ... on SlackReplyEntry {\n              __typename\n              slackMessageLink\n              slackWebMessageLink\n              customerId\n              text\n              attachments {\n                id\n                fileName\n                fileSize {\n                  bytes\n                }\n                fileMimeType\n              }\n              lastEditedOnSlackAt {\n                ...DateTime\n              }\n              deletedOnSlackAt {\n                ...DateTime\n              }\n              reactions {\n                name\n                imageUrl\n                actors {\n                  __typename\n                  ... on UserActor {\n                    userId\n                    user {\n                      publicName\n                    }\n                  }\n                  ... on CustomerActor {\n                    customerId\n                    customer {\n                      fullName\n                    }\n                  }\n                }\n              }\n            }\n            ... on ThreadEventEntry {\n              __typename\n              timelineEventId\n              title\n              customerId\n              externalId\n            }\n            ... on CustomerEventEntry {\n              __typename\n              timelineEventId\n              title\n              customerId\n              externalId\n            }\n            ... on ThreadAssignmentTransitionedEntry {\n              __typename\n              previousAssignee {\n                ... on User {\n                  id\n                  fullName\n                }\n                ... on MachineUser {\n                  id\n                  fullName\n                }\n                ... on System {\n                  id\n                }\n              }\n              nextAssignee {\n                ... on User {\n                  id\n                  fullName\n                }\n                ... on MachineUser {\n                  id\n                  fullName\n                }\n                ... on System {\n                  id\n                }\n              }\n            }\n            ... on ThreadAdditionalAssigneesTransitionedEntry {\n              __typename\n              previousAssignees {\n                ... on User {\n                  id\n                  fullName\n                }\n                ... on MachineUser {\n                  id\n                  fullName\n                }\n                ... on System {\n                  id\n                }\n              }\n              nextAssignees {\n                ... on User {\n                  id\n                  fullName\n                }\n                ... on MachineUser {\n                  id\n                  fullName\n                }\n                ... on System {\n                  id\n                }\n              }\n            }\n            ... on ThreadStatusTransitionedEntry {\n              __typename\n              nextStatus\n            }\n            ... on ThreadPriorityChangedEntry {\n              __typename\n              previousPriority\n              nextPriority\n            }\n            ... on ThreadLabelsChangedEntry {\n              __typename\n              previousLabels {\n                __typename\n                id\n                labelType {\n                  __typename\n                  id\n                  name\n                  description\n                  icon\n                  color\n                }\n              }\n              nextLabels {\n                __typename\n                id\n                labelType {\n                  __typename\n                  id\n                  name\n                  description\n                  icon\n                  color\n                }\n              }\n            }\n            ... on LinearIssueThreadLinkStateTransitionedEntry {\n              __typename\n              linearIssueId\n              previousLinearStateId\n              nextLinearStateId\n            }\n            ... on ServiceLevelAgreementStatusTransitionedEntry {\n              __typename\n              previousSLAStatus: previousStatus\n              nextSLAStatus: nextStatus\n            }\n            ... on ThreadDiscussionEntry {\n              __typename\n              slackChannelName\n              customerId\n              threadDiscussionId\n              slackMessageLink\n            }\n            ... on ThreadDiscussionResolvedEntry {\n              __typename\n              slackChannelName\n              customerId\n              threadDiscussionId\n              slackMessageLink\n              resolvedAt {\n                ...DateTime\n              }\n            }\n            ... on MSTeamsMessageEntry {\n              __typename\n              text\n              markdownContent\n              msTeamsMessageId\n              msTeamsMessageLink\n              customerId\n              attachments {\n                id\n                fileName\n                fileSize {\n                  bytes\n                }\n                fileMimeType\n              }\n            }\n            ... on ThreadLinkUpdatedEntry {\n              __typename\n              threadLink {\n                id\n                threadId\n                title\n                url\n                description\n                status\n              }\n              previousThreadLink {\n                id\n                threadId\n                title\n                url\n                description\n                status\n              }\n            }\n            ... on DiscordMessageEntry {\n              __typename\n              markdownContent\n              discordMessageId\n              discordMessageLink\n              customerId\n              attachments {\n                id\n                fileName\n                fileSize {\n                  bytes\n                }\n                fileMimeType\n              }\n            }\n            ... on HelpCenterAiConversationMessageEntry {\n              __typename\n              messageId\n              helpCenterId\n              messageMarkdown: markdown\n            }\n          }\n        }\n        cursor\n        }\n        pageInfo {\n          hasNextPage\n          hasPreviousPage\n          startCursor\n          endCursor\n        }\n      }\n    }\n  }\n':
    types.GetTimelineEventsDocument,
  '\n  query GetWorkspace {\n    myWorkspace {\n      id\n      name\n      publicName\n    }\n  }\n':
    types.GetWorkspaceDocument,
  '\n  fragment DateTime on DateTime {\n    __typename\n    iso8601\n  }\n':
    types.DateTimeFragmentDoc,
}

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: '\n  \n  \n  query GetCustomers($first: Int, $after: String) {\n    customers(first: $first, after: $after) {\n      edges {\n        node {\n          id\n          fullName\n          shortName\n          email {\n            email\n            isVerified\n          }\n          avatarUrl\n          company {\n            id\n            name\n          }\n          status\n          createdAt {\n            ...DateTime\n          }\n          updatedAt {\n            ...DateTime\n          }\n        }\n        cursor\n      }\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      totalCount\n    }\n  }\n'
): (typeof documents)['\n  \n  \n  query GetCustomers($first: Int, $after: String) {\n    customers(first: $first, after: $after) {\n      edges {\n        node {\n          id\n          fullName\n          shortName\n          email {\n            email\n            isVerified\n          }\n          avatarUrl\n          company {\n            id\n            name\n          }\n          status\n          createdAt {\n            ...DateTime\n          }\n          updatedAt {\n            ...DateTime\n          }\n        }\n        cursor\n      }\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      totalCount\n    }\n  }\n']
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: '\n  \n  \n  query GetTenants($first: Int, $after: String) {\n    tenants(first: $first, after: $after) {\n      edges {\n        node {\n          id\n          name\n          externalId\n          createdAt {\n            ...DateTime\n          }\n          updatedAt {\n            ...DateTime\n          }\n        }\n        cursor\n      }\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n    }\n  }\n'
): (typeof documents)['\n  \n  \n  query GetTenants($first: Int, $after: String) {\n    tenants(first: $first, after: $after) {\n      edges {\n        node {\n          id\n          name\n          externalId\n          createdAt {\n            ...DateTime\n          }\n          updatedAt {\n            ...DateTime\n          }\n        }\n        cursor\n      }\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n    }\n  }\n']
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: '\n  \n  \n  query GetThreadDetails($threadId: ID!) {\n    thread(threadId: $threadId) {\n      id\n      title\n      status\n      priority\n      statusChangedAt {\n        ...DateTime\n      }\n      createdAt {\n        ...DateTime\n      }\n      updatedAt {\n        ...DateTime\n      }\n      customer {\n        id\n        fullName\n        email {\n          email\n        }\n        company {\n          name\n        }\n      }\n      labels {\n        id\n        labelType {\n          name\n          color\n          icon\n        }\n      }\n      # timeline(first: 50) {\n      #   edges {\n      #     node {\n      #       id\n      #       timestamp {\n      #         ...DateTime\n      #       }\n      #       actor {\n      #         __typename\n      #         ... on UserActor {\n      #           user {\n      #             fullName\n      #             publicName\n      #           }\n      #         }\n      #         ... on CustomerActor {\n      #           customer {\n      #             fullName\n      #           }\n      #         }\n      #       }\n      #       entry {\n      #         __typename\n      #         ... on ChatEntry {\n      #           text\n      #           customerReadAt {\n      #             ...DateTime\n      #           }\n      #         }\n      #         ... on EmailEntry {\n      #           subject\n      #           textContent\n      #           from {\n      #             email\n      #             name\n      #           }\n      #           to {\n      #             email\n      #             name\n      #           }\n      #         }\n      #         ... on NoteEntry {\n      #           text\n      #         }\n      #       }\n      #     }\n      #   }\n      # }\n    }\n  }\n'
): (typeof documents)['\n  \n  \n  query GetThreadDetails($threadId: ID!) {\n    thread(threadId: $threadId) {\n      id\n      title\n      status\n      priority\n      statusChangedAt {\n        ...DateTime\n      }\n      createdAt {\n        ...DateTime\n      }\n      updatedAt {\n        ...DateTime\n      }\n      customer {\n        id\n        fullName\n        email {\n          email\n        }\n        company {\n          name\n        }\n      }\n      labels {\n        id\n        labelType {\n          name\n          color\n          icon\n        }\n      }\n      # timeline(first: 50) {\n      #   edges {\n      #     node {\n      #       id\n      #       timestamp {\n      #         ...DateTime\n      #       }\n      #       actor {\n      #         __typename\n      #         ... on UserActor {\n      #           user {\n      #             fullName\n      #             publicName\n      #           }\n      #         }\n      #         ... on CustomerActor {\n      #           customer {\n      #             fullName\n      #           }\n      #         }\n      #       }\n      #       entry {\n      #         __typename\n      #         ... on ChatEntry {\n      #           text\n      #           customerReadAt {\n      #             ...DateTime\n      #           }\n      #         }\n      #         ... on EmailEntry {\n      #           subject\n      #           textContent\n      #           from {\n      #             email\n      #             name\n      #           }\n      #           to {\n      #             email\n      #             name\n      #           }\n      #         }\n      #         ... on NoteEntry {\n      #           text\n      #         }\n      #       }\n      #     }\n      #   }\n      # }\n    }\n  }\n']
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: '\n  \n  \n  query GetThreads($filters: ThreadsFilter, $sortBy: ThreadsSort, $first: Int, $after: String) {\n    threads(filters: $filters, sortBy: $sortBy, first: $first, after: $after) {\n      edges {\n        node {\n          id\n          title\n          status\n          priority\n          statusChangedAt {\n            ...DateTime\n          }\n          updatedAt {\n            ...DateTime\n          }\n          createdAt {\n            ...DateTime\n          }\n          customer {\n            id\n            fullName\n            email {\n              email\n            }\n            company {\n              name\n            }\n          }\n          labels {\n            id\n            labelType {\n              name\n              color\n              icon\n            }\n          }\n          previewText\n        }\n        cursor\n      }\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      totalCount\n    }\n  }\n'
): (typeof documents)['\n  \n  \n  query GetThreads($filters: ThreadsFilter, $sortBy: ThreadsSort, $first: Int, $after: String) {\n    threads(filters: $filters, sortBy: $sortBy, first: $first, after: $after) {\n      edges {\n        node {\n          id\n          title\n          status\n          priority\n          statusChangedAt {\n            ...DateTime\n          }\n          updatedAt {\n            ...DateTime\n          }\n          createdAt {\n            ...DateTime\n          }\n          customer {\n            id\n            fullName\n            email {\n              email\n            }\n            company {\n              name\n            }\n          }\n          labels {\n            id\n            labelType {\n              name\n              color\n              icon\n            }\n          }\n          previewText\n        }\n        cursor\n      }\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      totalCount\n    }\n  }\n']
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: '\n  \n  \n  query GetTimelineEvents($threadId: ID!, $first: Int, $after: String, $last: Int, $before: String) {\n    thread(threadId: $threadId) {\n      id\n      timelineEntries(first: $first, after: $after, last: $last, before: $before) {\n      edges {\n        node {\n          id\n          customerId\n          threadId\n          timestamp {\n            ...DateTime\n          }\n          llmText\n          actor {\n            __typename\n            ... on UserActor {\n              userId\n              user {\n                __typename\n                id\n                fullName\n                publicName\n                email\n                status\n                avatarUrl\n              }\n            }\n            ... on MachineUserActor {\n              machineUserId\n              machineUser {\n                __typename\n                id\n                fullName\n                publicName\n                description\n              }\n            }\n            ... on CustomerActor {\n              customerId\n              customer {\n                __typename\n                id\n                fullName\n                email {\n                  email\n                }\n              }\n            }\n          }\n          entry {\n            __typename\n            ... on ChatEntry {\n              __typename\n              chatId\n              chatText: text\n              customerReadAt {\n                ...DateTime\n              }\n              attachments {\n                id\n                fileName\n                fileSize {\n                  bytes\n                }\n                fileMimeType\n              }\n            }\n            ... on EmailEntry {\n              __typename\n              emailId\n              subject\n              textContent\n              hasMoreTextContent\n              fullTextContent\n              markdownContent\n              hasMoreMarkdownContent\n              fullMarkdownContent\n              authenticity\n              sentAt {\n                ...DateTime\n              }\n              receivedAt {\n                ...DateTime\n              }\n              sendStatus\n              isStartOfThread\n              from {\n                name\n                email\n              }\n              to {\n                name\n                email\n              }\n              additionalRecipients {\n                name\n                email\n              }\n              hiddenRecipients {\n                name\n                email\n              }\n              attachments {\n                id\n                fileName\n                fileSize {\n                  bytes\n                }\n                fileMimeType\n              }\n              bounces {\n                bouncedAt {\n                  ...DateTime\n                }\n                recipient {\n                  name\n                  email\n                }\n                isSendRetriable\n              }\n            }\n            ... on NoteEntry {\n              noteId\n              text\n              markdown\n              attachments {\n                id\n                fileName\n                fileSize {\n                  bytes\n                }\n                fileMimeType\n              }\n            }\n            ... on CustomEntry {\n              externalId\n              title\n              type\n              attachments {\n                id\n                fileName\n                fileSize {\n                  bytes\n                }\n                fileMimeType\n              }\n            }\n            ... on SlackMessageEntry {\n              slackMessageLink\n              slackWebMessageLink\n              text\n              customerId\n              relatedThread {\n                threadId\n              }\n              attachments {\n                id\n                fileName\n                fileSize {\n                  bytes\n                }\n                fileMimeType\n              }\n              lastEditedOnSlackAt {\n                ...DateTime\n              }\n              deletedOnSlackAt {\n                ...DateTime\n              }\n              reactions {\n                name\n                imageUrl\n                actors {\n                  __typename\n                  ... on UserActor {\n                    userId\n                    user {\n                      publicName\n                    }\n                  }\n                  ... on CustomerActor {\n                    customerId\n                    customer {\n                      fullName\n                    }\n                  }\n                }\n              }\n            }\n            ... on SlackReplyEntry {\n              __typename\n              slackMessageLink\n              slackWebMessageLink\n              customerId\n              text\n              attachments {\n                id\n                fileName\n                fileSize {\n                  bytes\n                }\n                fileMimeType\n              }\n              lastEditedOnSlackAt {\n                ...DateTime\n              }\n              deletedOnSlackAt {\n                ...DateTime\n              }\n              reactions {\n                name\n                imageUrl\n                actors {\n                  __typename\n                  ... on UserActor {\n                    userId\n                    user {\n                      publicName\n                    }\n                  }\n                  ... on CustomerActor {\n                    customerId\n                    customer {\n                      fullName\n                    }\n                  }\n                }\n              }\n            }\n            ... on ThreadEventEntry {\n              __typename\n              timelineEventId\n              title\n              customerId\n              externalId\n            }\n            ... on CustomerEventEntry {\n              __typename\n              timelineEventId\n              title\n              customerId\n              externalId\n            }\n            ... on ThreadAssignmentTransitionedEntry {\n              __typename\n              previousAssignee {\n                ... on User {\n                  id\n                  fullName\n                }\n                ... on MachineUser {\n                  id\n                  fullName\n                }\n                ... on System {\n                  id\n                }\n              }\n              nextAssignee {\n                ... on User {\n                  id\n                  fullName\n                }\n                ... on MachineUser {\n                  id\n                  fullName\n                }\n                ... on System {\n                  id\n                }\n              }\n            }\n            ... on ThreadAdditionalAssigneesTransitionedEntry {\n              __typename\n              previousAssignees {\n                ... on User {\n                  id\n                  fullName\n                }\n                ... on MachineUser {\n                  id\n                  fullName\n                }\n                ... on System {\n                  id\n                }\n              }\n              nextAssignees {\n                ... on User {\n                  id\n                  fullName\n                }\n                ... on MachineUser {\n                  id\n                  fullName\n                }\n                ... on System {\n                  id\n                }\n              }\n            }\n            ... on ThreadStatusTransitionedEntry {\n              __typename\n              nextStatus\n            }\n            ... on ThreadPriorityChangedEntry {\n              __typename\n              previousPriority\n              nextPriority\n            }\n            ... on ThreadLabelsChangedEntry {\n              __typename\n              previousLabels {\n                __typename\n                id\n                labelType {\n                  __typename\n                  id\n                  name\n                  description\n                  icon\n                  color\n                }\n              }\n              nextLabels {\n                __typename\n                id\n                labelType {\n                  __typename\n                  id\n                  name\n                  description\n                  icon\n                  color\n                }\n              }\n            }\n            ... on LinearIssueThreadLinkStateTransitionedEntry {\n              __typename\n              linearIssueId\n              previousLinearStateId\n              nextLinearStateId\n            }\n            ... on ServiceLevelAgreementStatusTransitionedEntry {\n              __typename\n              previousSLAStatus: previousStatus\n              nextSLAStatus: nextStatus\n            }\n            ... on ThreadDiscussionEntry {\n              __typename\n              slackChannelName\n              customerId\n              threadDiscussionId\n              slackMessageLink\n            }\n            ... on ThreadDiscussionResolvedEntry {\n              __typename\n              slackChannelName\n              customerId\n              threadDiscussionId\n              slackMessageLink\n              resolvedAt {\n                ...DateTime\n              }\n            }\n            ... on MSTeamsMessageEntry {\n              __typename\n              text\n              markdownContent\n              msTeamsMessageId\n              msTeamsMessageLink\n              customerId\n              attachments {\n                id\n                fileName\n                fileSize {\n                  bytes\n                }\n                fileMimeType\n              }\n            }\n            ... on ThreadLinkUpdatedEntry {\n              __typename\n              threadLink {\n                id\n                threadId\n                title\n                url\n                description\n                status\n              }\n              previousThreadLink {\n                id\n                threadId\n                title\n                url\n                description\n                status\n              }\n            }\n            ... on DiscordMessageEntry {\n              __typename\n              markdownContent\n              discordMessageId\n              discordMessageLink\n              customerId\n              attachments {\n                id\n                fileName\n                fileSize {\n                  bytes\n                }\n                fileMimeType\n              }\n            }\n            ... on HelpCenterAiConversationMessageEntry {\n              __typename\n              messageId\n              helpCenterId\n              messageMarkdown: markdown\n            }\n          }\n        }\n        cursor\n        }\n        pageInfo {\n          hasNextPage\n          hasPreviousPage\n          startCursor\n          endCursor\n        }\n      }\n    }\n  }\n'
): (typeof documents)['\n  \n  \n  query GetTimelineEvents($threadId: ID!, $first: Int, $after: String, $last: Int, $before: String) {\n    thread(threadId: $threadId) {\n      id\n      timelineEntries(first: $first, after: $after, last: $last, before: $before) {\n      edges {\n        node {\n          id\n          customerId\n          threadId\n          timestamp {\n            ...DateTime\n          }\n          llmText\n          actor {\n            __typename\n            ... on UserActor {\n              userId\n              user {\n                __typename\n                id\n                fullName\n                publicName\n                email\n                status\n                avatarUrl\n              }\n            }\n            ... on MachineUserActor {\n              machineUserId\n              machineUser {\n                __typename\n                id\n                fullName\n                publicName\n                description\n              }\n            }\n            ... on CustomerActor {\n              customerId\n              customer {\n                __typename\n                id\n                fullName\n                email {\n                  email\n                }\n              }\n            }\n          }\n          entry {\n            __typename\n            ... on ChatEntry {\n              __typename\n              chatId\n              chatText: text\n              customerReadAt {\n                ...DateTime\n              }\n              attachments {\n                id\n                fileName\n                fileSize {\n                  bytes\n                }\n                fileMimeType\n              }\n            }\n            ... on EmailEntry {\n              __typename\n              emailId\n              subject\n              textContent\n              hasMoreTextContent\n              fullTextContent\n              markdownContent\n              hasMoreMarkdownContent\n              fullMarkdownContent\n              authenticity\n              sentAt {\n                ...DateTime\n              }\n              receivedAt {\n                ...DateTime\n              }\n              sendStatus\n              isStartOfThread\n              from {\n                name\n                email\n              }\n              to {\n                name\n                email\n              }\n              additionalRecipients {\n                name\n                email\n              }\n              hiddenRecipients {\n                name\n                email\n              }\n              attachments {\n                id\n                fileName\n                fileSize {\n                  bytes\n                }\n                fileMimeType\n              }\n              bounces {\n                bouncedAt {\n                  ...DateTime\n                }\n                recipient {\n                  name\n                  email\n                }\n                isSendRetriable\n              }\n            }\n            ... on NoteEntry {\n              noteId\n              text\n              markdown\n              attachments {\n                id\n                fileName\n                fileSize {\n                  bytes\n                }\n                fileMimeType\n              }\n            }\n            ... on CustomEntry {\n              externalId\n              title\n              type\n              attachments {\n                id\n                fileName\n                fileSize {\n                  bytes\n                }\n                fileMimeType\n              }\n            }\n            ... on SlackMessageEntry {\n              slackMessageLink\n              slackWebMessageLink\n              text\n              customerId\n              relatedThread {\n                threadId\n              }\n              attachments {\n                id\n                fileName\n                fileSize {\n                  bytes\n                }\n                fileMimeType\n              }\n              lastEditedOnSlackAt {\n                ...DateTime\n              }\n              deletedOnSlackAt {\n                ...DateTime\n              }\n              reactions {\n                name\n                imageUrl\n                actors {\n                  __typename\n                  ... on UserActor {\n                    userId\n                    user {\n                      publicName\n                    }\n                  }\n                  ... on CustomerActor {\n                    customerId\n                    customer {\n                      fullName\n                    }\n                  }\n                }\n              }\n            }\n            ... on SlackReplyEntry {\n              __typename\n              slackMessageLink\n              slackWebMessageLink\n              customerId\n              text\n              attachments {\n                id\n                fileName\n                fileSize {\n                  bytes\n                }\n                fileMimeType\n              }\n              lastEditedOnSlackAt {\n                ...DateTime\n              }\n              deletedOnSlackAt {\n                ...DateTime\n              }\n              reactions {\n                name\n                imageUrl\n                actors {\n                  __typename\n                  ... on UserActor {\n                    userId\n                    user {\n                      publicName\n                    }\n                  }\n                  ... on CustomerActor {\n                    customerId\n                    customer {\n                      fullName\n                    }\n                  }\n                }\n              }\n            }\n            ... on ThreadEventEntry {\n              __typename\n              timelineEventId\n              title\n              customerId\n              externalId\n            }\n            ... on CustomerEventEntry {\n              __typename\n              timelineEventId\n              title\n              customerId\n              externalId\n            }\n            ... on ThreadAssignmentTransitionedEntry {\n              __typename\n              previousAssignee {\n                ... on User {\n                  id\n                  fullName\n                }\n                ... on MachineUser {\n                  id\n                  fullName\n                }\n                ... on System {\n                  id\n                }\n              }\n              nextAssignee {\n                ... on User {\n                  id\n                  fullName\n                }\n                ... on MachineUser {\n                  id\n                  fullName\n                }\n                ... on System {\n                  id\n                }\n              }\n            }\n            ... on ThreadAdditionalAssigneesTransitionedEntry {\n              __typename\n              previousAssignees {\n                ... on User {\n                  id\n                  fullName\n                }\n                ... on MachineUser {\n                  id\n                  fullName\n                }\n                ... on System {\n                  id\n                }\n              }\n              nextAssignees {\n                ... on User {\n                  id\n                  fullName\n                }\n                ... on MachineUser {\n                  id\n                  fullName\n                }\n                ... on System {\n                  id\n                }\n              }\n            }\n            ... on ThreadStatusTransitionedEntry {\n              __typename\n              nextStatus\n            }\n            ... on ThreadPriorityChangedEntry {\n              __typename\n              previousPriority\n              nextPriority\n            }\n            ... on ThreadLabelsChangedEntry {\n              __typename\n              previousLabels {\n                __typename\n                id\n                labelType {\n                  __typename\n                  id\n                  name\n                  description\n                  icon\n                  color\n                }\n              }\n              nextLabels {\n                __typename\n                id\n                labelType {\n                  __typename\n                  id\n                  name\n                  description\n                  icon\n                  color\n                }\n              }\n            }\n            ... on LinearIssueThreadLinkStateTransitionedEntry {\n              __typename\n              linearIssueId\n              previousLinearStateId\n              nextLinearStateId\n            }\n            ... on ServiceLevelAgreementStatusTransitionedEntry {\n              __typename\n              previousSLAStatus: previousStatus\n              nextSLAStatus: nextStatus\n            }\n            ... on ThreadDiscussionEntry {\n              __typename\n              slackChannelName\n              customerId\n              threadDiscussionId\n              slackMessageLink\n            }\n            ... on ThreadDiscussionResolvedEntry {\n              __typename\n              slackChannelName\n              customerId\n              threadDiscussionId\n              slackMessageLink\n              resolvedAt {\n                ...DateTime\n              }\n            }\n            ... on MSTeamsMessageEntry {\n              __typename\n              text\n              markdownContent\n              msTeamsMessageId\n              msTeamsMessageLink\n              customerId\n              attachments {\n                id\n                fileName\n                fileSize {\n                  bytes\n                }\n                fileMimeType\n              }\n            }\n            ... on ThreadLinkUpdatedEntry {\n              __typename\n              threadLink {\n                id\n                threadId\n                title\n                url\n                description\n                status\n              }\n              previousThreadLink {\n                id\n                threadId\n                title\n                url\n                description\n                status\n              }\n            }\n            ... on DiscordMessageEntry {\n              __typename\n              markdownContent\n              discordMessageId\n              discordMessageLink\n              customerId\n              attachments {\n                id\n                fileName\n                fileSize {\n                  bytes\n                }\n                fileMimeType\n              }\n            }\n            ... on HelpCenterAiConversationMessageEntry {\n              __typename\n              messageId\n              helpCenterId\n              messageMarkdown: markdown\n            }\n          }\n        }\n        cursor\n        }\n        pageInfo {\n          hasNextPage\n          hasPreviousPage\n          startCursor\n          endCursor\n        }\n      }\n    }\n  }\n']
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: '\n  query GetWorkspace {\n    myWorkspace {\n      id\n      name\n      publicName\n    }\n  }\n'
): (typeof documents)['\n  query GetWorkspace {\n    myWorkspace {\n      id\n      name\n      publicName\n    }\n  }\n']
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: '\n  fragment DateTime on DateTime {\n    __typename\n    iso8601\n  }\n'
): (typeof documents)['\n  fragment DateTime on DateTime {\n    __typename\n    iso8601\n  }\n']

export function graphql(source: string) {
  return (documents as any)[source] ?? {}
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> =
  TDocumentNode extends DocumentNode<infer TType, any> ? TType : never
